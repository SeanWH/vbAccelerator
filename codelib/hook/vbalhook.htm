<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Author" content="Steve McMahon">
<meta name="KeyWords"
content="VB, VB6, Visual Basic, Visual Basic 5, Visual Basic 6, Dynamic HTML, DHTML, IE4, Internet Explorer, Internet Explorer 4, Active X, Active X Controls, Visual Basic Controls">
<meta name="GENERATOR" content="Notepad">
<title>vbAccelerator Hook Library</title>
</head>


<body topmargin="0" leftmargin="0" link="#660000" vlink="#999966" LEFTMARGIN="0" TOPMARGIN="0" MARGINHEIGHT="0" MARGINWIDTH="0"  background="..\..\images\legacy.html">

<!-- AD:START -->
<table bgcolor="#336699" border="0" cellpadding="0" cellspacing="0" width="100%" >
<tr>
<td width="468">
<script type="text/javascript"><!--
google_ad_client = "pub-4690375644913255";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
//--></script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<noscript>
<a href="..\..\home\index.html"><img src="..\..\home\res\vbaccelad.png" width="468" height="60" 
border="0" alt="vbAccelerator - Faster VB and .NET Code" /></a>
</noscript>
</td>
<td>
<a href="..\..\home\index.html"><img src="..\..\home\res\vbaccelnew.png" width="125" height="60" 
border="0" alt="The new vbAccelerator Site - more VB and .NET Code and Controls" /></a>
</td>
</tr>
</table>
<!-- AD:END -->



<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#660000">
        <td width="100%" height="25">
        <font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
        <a name="sectop"></a>Source Code
        </strong>
        </font>
        </td>
        <td width="96">
        <font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
        <a title="Installation Instructions and Requirements" href="..\..\install.htm"><img src="..\..\images\install.gif" height="12" width="96" border="0" valign="center"></a>
        </strong>
        </font>
        </td>
        <td width="96">
        <font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
        <a title="Back to Source Code" href="..\..\overview.htm"><img src="..\..\images\srccode.gif" height="12" width="96" border="0" valign="center"></a>
        </strong>
        </font>
        </td>
</tr>
</table>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#6699CC">
        <td valign="top" width="32">
        <font color="#660000" face="verdana,arial,helvetica" size="6"><strong>3</strong></font>
        </td>
        <td>
        <font color="#660000" face="verdana,arial,helvetica" size="4"><strong>Code Libraries</strong></font>
        <font color="#660000" face="verdana,arial,helvetica" size="2">
        </font>
        </td>
        <td width="10">&nbsp</td>
</tr>
</table>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#EEEEEE">
	<td>&nbsp</td>
	<td>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	<p><b>Win32 Hooks in VB - The vbAccelerator Hook Library</b></p>
	</font>
	</td>
	<td>&nbsp;</td>
</tr>
<tr>
	<td>&nbsp;</td>
	<td>
	<font color="#6699CC" face="verdana,arial,helvetica" size="1">
	<p>The ultimate low-level control over Windows</p>
	</font>	
	</td>
	<td>&nbsp;</td>
</tr>
</table>

<!-- SUPERCEEDED:START -->
<br />
<table border="0" width="100%" cellspacing="0" cellpadding="5">
<tr>
<td width="66" bgcolor="#FFFFFF"><br /></td>
<td width="100%" bgcolor="#EEEEEE">
	<p>
	<font color="#666666" face="verdana,arial,helvetica" size="5">
	<b>&nbsp;NOTE:</b></font>
	<font color="#999999" face="verdana,arial,helvetica" size="2">this code has been superceded by the <a href="..\..\home\vb\code\libraries\hooks\vbaccelerator_hook_library\article.html" target="_top">version at the new site</a>.
	</font>
	<br />
        </p>
</td>
<td width="66" bgcolor="#FFFFFF"><br /></td>
</tr>
</table>
<br />
<!-- SUPERCEDED:END -->

<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#FFFFFF">
        <td>&nbsp</td>
        <td>
        <font color="#000000" face="verdana,arial,helvetica" size="2">
        <br>
        <p><img src="..\..\images\vbalhook.gif" width="302" height="83" alt="If this was the cover of VBPJ, there would be a picture of a fisherman 'hooking' a fish here...  Sigh." border="0"></p>
        <p><a href="vbalhook.zip"><img src="..\..\images\vbdnload.gif" width="16" height="16" border="0" hspace="4">Download the vbAccelerator Hooks Library (18kb)</a><br>
	<a href="vbalhkd.zip"><img src="..\..\images\vbdnload.gif" width="16" height="16" border="0" hspace="4">Download the demonstration projects (32kb)</a><br>
	<a href="vbalhks.zip"><img src="..\..\images\vbdnload.gif" width="16" height="16" border="0" hspace="4">Download the library and demonstration projects (81kb)</a></p>
        </font>
        <font color="#000000" face="verdana,arial,helvetica" size="2">
        <p>

	<a name="secoverview"></a>
	<b>Overview</b><br>
	When a subclass isn't tough enough for the job, its time to move to an even lower-level and 
	more disruptive technique.  Win32 Hooks are a method by which you can tap into the 
	windows message	stream for every single message directed to every window in your application.
	You can modify or even discard messages before they even reach the target window.  This 
	technique gives you a lot of control!
	<br><br>
	Windows Hooks are defined in the Win32 SDK as follows:
	<ul>
	<li>&quot;A Windows hook is a point in the system message-handling mechanism where an application can 
	install a subroutine to monitor the message traffic in the system and process certain types of 
	messages before they reach the target window procedure.&quot;
	<li>&quot;Hooks tend to slow down the system because they increase the amount of processing the system 
	must perform for each message. You should install a hook only when necessary, and remove it as 
	soon as possible.&quot;
	</ul>
	<br>

	<a name="seccompared"></a>
	<b>Hooks Compared to Sub-Classing</b><br>
	Essentially a Windows Hook is like a subclass except it applies to the next point up in the
	message chain.  In Win32, messages are queued and sent to the appropriate window via the
	<i>WindowProc</i> function.  A subclass can intercept messages by replacing the existing
	<i>WindowProc</i> function with a new one.
	<br><br>
	With a Hook, you get to see all messages <i>before</i> Windows has decided which <i>WindowProc</i>
	procedure to direct the message to.  You can modify or discard most messages at this point too.
	So using the Hook technique you not only get to act on messages at the highest point; you can
	also get at messages regardless of which window is going to get the message.  This is very useful
	for process Keyboard or Mouse messages on a global basis in your application, because these 
	messages are normally directed to the window with the focus, making it very awkward to perform
	this technique using Subclassing because you would have to subclass every single window handle
	in your application to follow the mouse events.  Using a Hook, the process is simple!
	<br><br><br>
	<b>An Example</b><br>
	<img src="..\..\images\hooksamp.gif" vspace="8" width="251" height="180" alt="VB Accelerator Problem Application"><br>
	Let's say you want to place a button on a PictureBox child of an MDI form.  This button has the
	caption &New... and hence the accelerator key Alt+N.  In normal Windows applications you would
	expect chooing Alt+N would activate that button regardless of what window has the focus.  But
	it doesn't work whenever the child form has the focus!  In fact Alt+N only does anything when
	the MDI form has the focus.
	<br><br>
	This is actually a fundamental problem in VB for MDI forms - there is no way for an accelerator on another
	form to be active when there is a child form active.  We could solve this problem by 
	duplicating the New button  onto the child form, but in order for it to respond to accelerator keys 
	it must be visible and part of the tab order - not what you want.
	<br><br>
	Solving the problem with a Windows Hook is quite simple.  We install a hook of type <i>WH_KEYBOARD</i>.
	Then the app receives all keyboard events for the entire application.  When the keyboard events indicate 
	that Alt+N has been pressed, the code just needs to check whether the MDIForm is the same as the window
	returned by <i>GetActiveWindow</i>; if it is it then the code fires the cmdNew_Click event and 
	eats the keyboard message.
	<br><br><br>

	<a name="secscope"></a>
	<b>Hook Scope: System Wide or Local Thread Hooks</b><br>	
	One of the features of the Win32 Hook library is that it allows you to specify whether the scope of
	your hook is local to the current thread or whether it applies to <i>all</i> windows in the entire
	system.  System Wide hooks are always a topic of interest because they let you modify windows in
	other applications; for example the stupidly-named <a href="javascript:window.alert(&quot;http://www.stardock.com/\nThis link was not retrieved.&quot;)" target="_top">Window Blinds</a> 
	application uses this method to apply a skin when drawing all windows on your system (well, it tries
	to, anyway!)
	<br><br>
	Before you get excited, though, VB on its own cannot be used to create a system-wide hook.  
	This is because	the hook procedure must reside within a Windows DLL, and VB cannot create	
	these beasts (because you cannot specify to export the <i>HookProc</i> function).  Also
	I should point out that system-wide hooks aren't much fun to write: you can't debug them, and
	if anything goes wrong it takes your whole system down!  If you have some C knowledge, however,
	you can steal code either from the <i>Spy</i> utility provided with the NT Resource Kit or
	there is a most interesting sample at <a href="..\..\linxadv.htm#seccodeguru">CodeGuru</a>
	which adds a Pin button to the caption of all windows on the system.
	<br><br><br>

	<a name="sectypes"></a>
	<b>Types Of Windows Hooks</b><br>	
	There are 14 different types of Windows Hooks defined for Win32, however, some of these are not
	implemented and some cannot be used in Visual Basic or are of very limited value when not used
	System Wide.
	<br><br>
	That leaves the following:
	<ul>
	<li>WH_KEYBOARD<br>
	Intercepts all keyboard messages and allows you to modify or discard any message (except Ctrl+Alt+Del).
	For example, the <a href="..\comctl\retbar.htm">vbAccelerator Toolbar, Rebar and CoolMenu</a>
	and <a href="vbalacel.htm">vbAccelerator Accelerator</a> controls use this hook to check for 
	accelerators.
	<li>WH_MOUSE<br>
	Intercepts all mouse messages and allows you to modify or discard any message.
	<li>WH_CALLWNDPROC<br>
	Before Windows is about to call any window procedure within the scope of the Hook, it fires this 
	hook procedure with the details of the parameters it will use to call the procedure. It allows you to 
	modify any of the parameters of the message sent. 
	<li>WH_CALLWNDPROCRET<br>
	Similar to <i>WH_CALLWNDPROC</i> except it is called whenever a window procedure within the scope
	of the Hook returns.  It allows you to modify the return value or parameters for the message.
	For example, the <a href="..\gfx\anicur.htm">Animated Cursors in VB</a> sample uses this to 
	capture the WM_SETCURSOR message for every window to emulate the <i>Screen.MousePointer</i> property.
	<li>WH_MSGFILTER<br>
	This Hook allows you to process or modify all messages meant for all the dialog boxes, 
	message boxes, scroll bars or menus in an application.  For example, the 
	<a href="..\comctl\retbar.htm">vbAccelerator Toolbar, Rebar and CoolMenu</a> control uses this
	hook to find out what messages are being sent when menus are dropped down, so it can close
	Popup Menus depending on where the mouse is.
	<li>WH_GETMESSAGE<br>
	This Hook is called whenever a window within the Hook scope calls the <i>GetMessage</i> or 
	<i>PeekMessage</i> functions.
	<li>WH_CBT<br>
	Computer-based training hook.  Fired when windows are created, destroyed, moved and activated etc.  
	This Hook is intended for use to capture a sequence of messages which can be replayed for 
	CBT apps, however, a better use for it is the one MFC puts it to - to automatically detect creation
	of all windows within an application and to apply a subclassing procedure to each one.	
	</ul>			
	<br>

	<a name="secchain"></a>
	<b>Hook Chains</b><br>
	When you install a Hook, Win32 actually adds it to what is termed the &quot;Hook Chain&quot;.  This
	allows you to install multiple Hooks of the same type in an application.  When the first Hook is added,
	Windows places it at the start of the chain and begins passing messages to the Hook and receiving them
	from it.  If another hook of the same type is added on
	the same thread, windows then directs output from the first hook to the second one before receiving the
	output for its own use.
	<br><br>
	This means that you must be careful when using a Hook to modify or remove messages.  If there are two
	Hooks on the same thread, and one removes messages, behaviour may differ depending on the order the
	Hooks are installed.  And in VB5 there is very little control over the order that controls are created...
	<br><br><br>

	<a name="seclibrary"></a>
	<b>The Windows Hooks Library</b><br>
	The hooks library is designed to be used either as a DLL or compiled directly into your application.
	An example of compiling the library directly into code is provided in the <a href="vbalacel.html">vbAccelerator
	Accelerator control</a>, so this section will cover using the DLL version.
	<br><br>

	The Hooks Library consists of two parts:
	<ol>
	<li><font color="#336699">IWindowsHook<br><font color="#000000">
	You must implement this interface to use the Hook library.  Once your object implements this interface,
	then whenever the Hook(s) you connect to fire, the <i>IWindowsHook_HookProc</i> method will be called
	with the Hook information.

	<li><font color="#336699">GHook<br><font color="#000000">
	This interface allows you to attach and detach a Hook, as well as providing some helper functions for
	translating the <i>lParam</i> member of the hook function, which contains the details about the Hook.
	</ol>
	<br>

	<a name="secdocs"></a>
	<b>Documentation</b><br>
	Documentation for the vbAccelerator Windows Hook Library's properties, methods and classes is available as an RTF.  This documentation was
	created with the <a href="..\actvxdoc\article.htm">Active X Documenter</a>.<br><br>
	<a href="vbalhook.rtf" target="vbamain"><img src="..\..\images\dnlddoc.gif" width="20" height="16" border="0" hspace="4">Click here to download/view the vbalHook method and event documentation</a>			
	<br><br><br>
	

	<a name="secquickstart"></a>	
	<b>Quick Start</b><br>
	This sample will give you a quick introduction to the Hooks library.  Start a new project, and 
	add a reference to the vbAccelerator Window Hooks Library by choosing Project->References and
	selecting &quot;vbAccelerator Windows Hook Helper DLL&quot;.  If it isn't there, click Browse and
	search for vbalHook.DLL on your disk.  Once you have a reference, add various controls to your form
	including a TextBox control.  Then add the following code:
	<br><br>
<p>
<font color="#000000" face="Lucida Console,Courier New" size="1">
Implements IWindowsHook<br>
<br>
Private Sub Form_Load()<br>
&nbsp;&nbsp;&nbsp;InstallHook Me, WH_KEYBOARD<br>
End Sub<br>
<br>
Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)<br>
&nbsp;&nbsp;&nbsp;RemoveHook Me, WH_KEYBOARD<br>
End Sub<br>
<br>
Private Function IWindowsHook_HookProc(ByVal eType As EHTHookTypeConstants, ByVal nCode As Long, ByVal wParam As Long, ByVal lParam As Long, bConsume As Boolean) As Long<br>
<br>
&nbsp;&nbsp;&nbsp;If KeyBoardlParam(lParam).KeyDown Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If Me.ActiveControl is Text1 Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtTest.SelText = &quot;    &quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bConsume = True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If<br>
&nbsp;&nbsp;&nbsp;End If<br>
End Function<br>
<br>
<br>

</font>
</p>
<font color="#000000" face="verdana,arial,helvetica" size="2">
	Now run the project.  Whenever the TextBox control Text1 is in focus, pressing the tab key will
	cause the tab characters to be entered into the text box rather than moving to the next control
	in the tab index.  This works because <i>all</i> key presses in the project are sent through the
	<i>IWindowsHook_HookProc</i> function before being sent to any control or form.  So you can consume any
	key press you want and stop it ever reaching the control!  Now that's control...
	<br><br><br>	

	<a name="secsamples"></a>
	<b>The Sample Code</b><br>
	There are two samples provided with the download: 
	<ol>
	<li><font color="#336699">HookKeyEvents<br><font color="#000000">
	This sample shows how to hook key events using a WH_KEYBOARD hook, similar to the Quick Start 
	sample above.  It demonstrates tab key handling in a TextBox, ListBox and ComboBox and also how 
	to make a form unload in response to the Escape key regardless of whether there is a 
	CommandButton or Control with the <i>Cancel</i> property set.

	<li><font color="#336699">MouseHook<br><font color="#000000">
	This sample demonstrates hooking mouse events.  It uses a WH_MOUSE hook to intercept all mouse events
	before they reach the form or control.  This allows the sample to provide:
	<ul>
	<li>A status bar indication of which control the mouse is over.
	<li>A "select controls" mode which works similarly to the selection of controls in the VB IDE.
	</ul>
	Both of these are completely independent of the controls on the form - you can add as many
	new controls as you like to the form in any relationship to each other and the code will continue
	to work.
	<Br><br>
	With a little more design work it should be possible to create a form designer which works
	exactly the same as the VB IDE from this sample!
	</ol>
	
	</p>

	</font>
<p>
<font color="#000000" face="verdana,arial,helvetica" size="2">
	
        <br><br>

        <p><a href="#sectop"><img src="..\..\images\top.gif" border="0" width="8" height="12" hspace="4" alt="Top"></a>Back to <a href="#sectop">top</a><br>
	<a href="..\..\overview.htm"><img src="..\..\images\sc.gif" border="0" width="8" height="12" hspace="4" alt="Source Code - What We're About!"></a>Back to <a href="..\..\overview.htm">Source Code</a></p>
	<br>
        </font>

        </td>
        <td>&nbsp</td>
</tr>
</table>

<!-- BODY:END -->

<!-- FOOTER:START -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td colspan="2">
        <IMG SRC="..\..\images\grpixel.gif" height="1" width="100%" border="0" ALT="">
        </td>
    </tr>
    <tr>
	<td width="16">&nbsp;</td>
        <td>
	<font size="1" face="Verdana, Arial, Helvetica">
	<p>
	<a href="..\..\mission.htm">About</a>&nbsp;&nbsp;<a 
	href="..\..\contrib.htm">Contribute</a>&nbsp;&nbsp;<a 
	href="mailto:steve@vbaccelerator.com">Send Feedback</a>&nbsp;&nbsp;<a 
	href="..\..\privacy.html">Privacy</a>
	<br><br>
        Copyright &copy; 1998-1999, Steve McMahon (
	<a href="mailto:steve@vbaccelerator.com">steve@vbaccelerator.com</a>). All Rights Reserved.<br>
	Last updated: 25 August 1999</font></p>
        </td>
    </tr>
</table>
<!-- FOOTER:END -->

</body>
</html>
