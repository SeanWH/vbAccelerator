<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Author" content="Steve McMahon">
<meta name="KeyWords"
content="VB, VB6, Visual Basic, Visual Basic 5, Visual Basic 6, Dynamic HTML, DHTML, IE4, Internet Explorer, Internet Explorer 4, Active X, Active X Controls, Visual Basic Controls">
<meta name="GENERATOR" content="Notepad">
<title>Enumerating Windows and Fonts Using the API</title>
</head>


<body topmargin="0" leftmargin="0" link="#660000" vlink="#999966" LEFTMARGIN="0" TOPMARGIN="0" MARGINHEIGHT="0" MARGINWIDTH="0"  background="..\..\images\legacy.html">

<!-- AD:START -->
<table bgcolor="#336699" border="0" cellpadding="0" cellspacing="0" width="100%" >
<tr>
<td width="468">
<script type="text/javascript"><!--
google_ad_client = "pub-4690375644913255";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
//--></script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<noscript>
<a href="..\..\home\index.html"><img src="..\..\home\res\vbaccelad.png" width="468" height="60" 
border="0" alt="vbAccelerator - Faster VB and .NET Code" /></a>
</noscript>
</td>
<td>
<a href="..\..\home\index.html"><img src="..\..\home\res\vbaccelnew.png" width="125" height="60" 
border="0" alt="The new vbAccelerator Site - more VB and .NET Code and Controls" /></a>
</td>
</tr>
</table>
<!-- AD:END -->



<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#660000">
	<td width="100%" height="25">
	<font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
	<a name="sectop"></a>Source Code
	</strong>
	</font>
	</td>
	<td width="96">
	<font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
	<a title="Installation Instructions and Requirements" href="..\..\install.htm"><img src="..\..\images\install.gif" height="12" width="96" border="0" valign="center"></a>
	</strong>
	</font>
	</td>
	<td width="96">
	<font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
	<a title="Back to Source Code" href="..\..\overview.htm"><img src="..\..\images\srccode.gif" height="12" width="96" border="0" valign="center"></a>
	</strong>
	</font>
	</td>
</tr>
</table>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#6699CC">
	<td valign="top" width="32">
	<font color="#660000" face="verdana,arial,helvetica" size="6"><strong>3</strong></font>
	</td>
	<td>
	<font color="#660000" face="verdana,arial,helvetica" size="4"><strong>Code Libraries</strong></font>
	<font color="#660000" face="verdana,arial,helvetica" size="2">
	</font>
	</td>
	<td width="10">&nbsp</td>
</tr>
</table>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#EEEEEE">
	<td>&nbsp;</td>
	<td valign="top" width="100%">
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	<b>Enumerating Windows and Fonts Using the API</b>	
	</font>
	</td>
	<td>&nbsp;</td>
</tr>
<tr>
	<td>&nbsp;</td>
	<td>
	<font color="#660000" face="verdana,arial,helvetica" size="1">
	<p>Using VB's AddressOf keyword to hook into API enumerations - the only reliable way to find all windows or fonts.</p>
	</font>	
	</td>
	<td>&nbsp;</td>
</tr>
</table>

<!-- SUPERCEEDED:START -->
<br />
<table border="0" width="100%" cellspacing="0" cellpadding="5">
<tr>
<td width="66" bgcolor="#FFFFFF"><br /></td>
<td width="100%" bgcolor="#EEEEEE">
	<p>
	<font color="#666666" face="verdana,arial,helvetica" size="5">
	<b>&nbsp;NOTE:</b></font>
	<font color="#999999" face="verdana,arial,helvetica" size="2">this code has been superceded by the <a href="..\..\home\vb\code\libraries\windows\enumerating_windows\article.html" target="_top">version at the new site</a>.
	</font>
	<br />
        </p>
</td>
<td width="66" bgcolor="#FFFFFF"><br /></td>
</tr>
</table>
<br />
<!-- SUPERCEDED:END -->


<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#FFFFFF">
	<td>&nbsp</td>
	<td>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	<br>	
	<p><img src="..\..\images\enumfont.gif" alt="[Font Enumeration Demo]" width="451" height="321"></p>

	<p>
	<b>Updated!</b> 25 October 1998.  The font enumeration sample had a bug which prevented the
	 full name, style and charset properties from being returned.  Thanks
	to Serge Baranovsky for pointing out the error and sending some better code!  (Check out his
	site at <a href="javascript:window.alert(&quot;http://www.geocities.com/SiliconValley/Hills/9086/default.html\nThis link was not retrieved.&quot;)" target="_top">http://www.geocities.com/SiliconValley/Hills/9086/default.html</a>)
	</p>
	<p>
	<b>Introduction</b><br>
	Prior to VB5, it was impossible to use the enumeration methods provided in the Windows API without
	relying on a proprietary custom control.  This was
	a problem if you wanted to find out all the fonts installed on the system, or to determine which Windows
	are loaded, because the only reliable methods you can use to do this are enumerations.
	<br>
	<br>
	The introduction of the AddressOf operator to VB5 allows the enumeration methods to be used, although it
	is not as simple as it ought to be.  The sample projects provided with this article provide a robust and
	useful code to access Windows and Font enumerations.
	</p>

	<p><a href="enumwin.zip"><img src="..\..\images\vbdnload.gif" width="16" height="16" border="0" hspace="4">Download the EnumWindows project files (14kb)</a></p>	
	<p><a href="enumfont.zip"><img src="..\..\images\vbdnload.gif" width="16" height="16" border="0" hspace="4">Download the EnumFonts project files (11kb)</a></p>	
	
	<p>
	<b>How Enumeration Methods Work</b><br>
	Windows API enumeration methods work by having an initiating function which is given the address of a
	function in your program to call.  The call to the initiating function then starts a background process
	which repeatedly calls the function you have provided with another item until all items are exhausted
	or your function returns False, which indicates you don't want any further items.
	<br><br>
	<b>Providing a Function Address</b><br>
	You can provide an address to a function in a VB application by using the Address Of operator.  This takes
	the function name as a parameter and returns a long pointer.  Whilst I am most happy this has been
	at last provided (I'm a bit sad that way), there is a unfortunately a strict limitation on 
	where you can put a function you want to use with AddressOf.  The function has to reside within a .Bas module -
	you cannot place it within an object (i.e. form, usercontrol or class).  So if you want your enumeration to
	return values to an instance of an object, you either have to hack around with global variables and methods
	to get the information between the module and your object (urgh!) or somehow tell the module about the
	object instance that is calling this.
	<br><br>
	<b>An Attempt to Code Around This Elegantly</b><br>
	My code to work around this uses the Implements feature to specify a standard interface your object
	will use to interface with the module.  Here is a brief description of how it works, using the EnumWindows 
	call as an example.<br><br>
	The EnumWindows API call causes Windows to call your specied function for each window in the system, 
	providing the hWnd of the window.  The declare for this function is as follows:
	</p>
	</font>
<font face="Lucida Console,courier new" size="2">
<p>
Public Declare Function EnumWindows Lib "user32" (ByVal lpEnumFunc As Long, ByVal lparam As Long) As Long
</p>
</font>
<font color="#000000" face="verdana,arial,helvetica" size="2">
<p>
	The function passed via lpEnumFunc must have the same parameters as Windows expects, otherwise when
	it calls it you will either get a crash or a stack fault.   In this case, the parameters are
	the hWnd of the window, and the lparam value passed in when EnumWindows was first called.  In addition,
	the function should be declared as a long so you can return True or False back to Windows to tell it
	whether to continue enumeration or not:
	</p>
	</font>
<font face="Lucida Console,courier new" size="2">
<p>

Private Function EnumWindowsProc( _<br>
&nbsp &nbsp        ByVal hwnd As Long, _<br>
&nbsp &nbsp        ByVal lparam As Long _<br>
&nbsp &nbsp    ) As Long<br>
<br>
</p>
</font>
<font color="#000000" face="verdana,arial,helvetica" size="2">
<p>
	Having set these up in a module, you then want to provide a method to initiate the Windows 
	enumeration, and to allow the calling object to get the items returned by the enumeration.
	I do this by first setting up an interface class which specifies what the calling object must
	do in order to respond to the enumeration.  In this case, the calling object should be
	notified with the hWnd whenever a new window is provided by EnumWindowsProc, and should have the 
	ability to stop the enumeration.  I also allow the object to specify its own Identifier number
	to pass into the lParam value of EnumWindows via an Identifier property get:
	</p>
	</font>
<font face="Lucida Console,courier new" size="2">
<p>
Public Sub EnumWindow(ByVal hwnd As Long, ByRef bStop As Boolean)<br>
<br>
End Sub<br>
Public Property Get Identifier() As Long<br>
<br>
End Property<br>
<br>
</p>
</font>
<font color="#000000" face="verdana,arial,helvetica" size="2">
<p>
	This class just specifies the interface to the EnumWindows method, so it doesn't have any code
	in it.  Any code you want to run in these methods or Property Gets must be coded in the calling
	object itself.  In my code, I call it IEnumWindowsSink because the object which is going to 
	implement it is the 'sink' for EnumWindows calls.
	<br><br>
	The module to enumerate the windows can then be set up as follows:

	</p>
	</font>
<font face="Lucida Console,courier new" size="2">
<p>
Private m_cSink As IEnumWindowsSink<br>
<br>
Private Function EnumWindowsProc( _<br>
&nbsp &nbsp        ByVal hwnd As Long, _<br>
&nbsp &nbsp        ByVal lparam As Long _<br>
&nbsp    ) As Long<br>
Dim bStop As Boolean<br>
&nbsp &nbsp    bStop = False<br>
&nbsp &nbsp    m_cSink.EnumWindow hwnd, bStop<br>
&nbsp &nbsp    If (bStop) Then<br>
&nbsp &nbsp &nbsp &nbsp        EnumWindowsProc = 0<br>
&nbsp &nbsp    Else<br>
&nbsp &nbsp &nbsp &nbsp        EnumWindowsProc = 1<br>
&nbsp &nbsp    End If<br>
&nbsp &nbspEnd Function<br>
<br>
Public Function EnumerateWindows( _<br>
&nbsp &nbsp &nbsp &nbsp        ByRef cSink As IEnumWindowsSink _<br>
&nbsp &nbsp    ) As Boolean<br>
&nbsp &nbsp    If Not (m_cSink Is Nothing) Then Exit Function<br>
&nbsp &nbsp    Set m_cSink = cSink<br>
&nbsp &nbsp    EnumWindows AddressOf EnumWindowsProc, cSink.Identifier<br>
&nbsp &nbsp    Set m_cSink = Nothing<br>
End Function<br>
<br>
</p>
</font>
<font color="#000000" face="verdana,arial,helvetica" size="2">
<p>
You are now in a position to use this from any form or class.  By telling the form/class to implement the 
IEnumWindowsSink methods, VB will automatically put the EnumWindow sub and Identifier Property Get into
the code, requiring you to code them.  Here is a sample showing how to find all
the Windows on the system from a form.  Here the items are placed into a ListView control called lvwWindows 
with 4 columns:
</p>
	</font>
<font face="Lucida Console,courier new" size="2">
<p>
Implements IEnumWindowsSink<br>
<br>
Private Sub IEnumWindowsSink_EnumWindow(ByVal hwnd As Long, bStop As Boolean)<br>
Dim itmX As ListItem<br>
&nbsp &nbsp     Set itmX = lvwWindows.ListItems.Add(, , WindowTitle(hwnd))<br>
&nbsp &nbsp     itmX.SubItems(1) = ClassName(hwnd)<br>
&nbsp &nbsp     itmX.SubItems(2) = hwnd<br>
&nbsp &nbsp     itmX.SubItems(3) = IsWindowVisible(hwnd)<br>
    <br>
End Sub<br>
<br>
Private Property Get IEnumWindowsSink_Identifier() As Long<br>
&nbsp &nbsp     IEnumWindowsSink_Identifier = Me.hwnd<br>
End Property<br>
<br>
</p>
</font>
<font color="#000000" face="verdana,arial,helvetica" size="2">
<p>
The definitions of the functions to get a Window's title, class and visibility from a hWnd are as follows:
</p>
	</font>
<font face="Lucida Console,courier new" size="2">
<p>
Public Declare Function IsWindowVisible Lib "user32" (ByVal hwnd As Long) As Long<br>
Public Declare Function GetWindowText Lib "user32" Alias "GetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) As Long<br>
Public Declare Function GetWindowTextLength Lib "user32" Alias "GetWindowTextLengthA" (ByVal hwnd As Long) As Long<br>
Public Declare Function GetClassName Lib "user32" Alias "GetClassNameA" (ByVal hwnd As Long, ByVal lpClassName As String, ByVal nMaxCount As Long) As Long<br>
<br>	
Public Function WindowTitle(ByVal lHwnd As Long) As String<br>
Dim lLen As Long<br>
Dim sBuf As String<br>
<br>
&nbsp &nbsp     ' Get the Window Title:<br>
&nbsp &nbsp     lLen = GetWindowTextLength(lHwnd)<br>
&nbsp &nbsp     If (lLen > 0) Then<br>
&nbsp &nbsp &nbsp &nbsp         sBuf = String$(lLen + 1, 0)<br>
&nbsp &nbsp &nbsp &nbsp         lLen = GetWindowText(lHwnd, sBuf, lLen + 1)<br>
&nbsp &nbsp &nbsp &nbsp         WindowTitle = Left$(sBuf, lLen)<br>
&nbsp &nbsp     End If<br>
&nbsp &nbsp     <br>
End Function<br>
Public Function ClassName(ByVal lHwnd As Long) As String<br>
Dim lLen As Long<br>
Dim sBuf As String<br>
&nbsp &nbsp     lLen = 260<br>
&nbsp &nbsp     sBuf = String$(lLen, 0)<br>
&nbsp &nbsp     lLen = GetClassName(lHwnd, sBuf, lLen)<br>
&nbsp &nbsp     If (lLen <> 0) Then<br>
&nbsp &nbsp &nbsp &nbsp         ClassName = Left$(sBuf, lLen)<br>
&nbsp &nbsp     End If<br>
End Function<br>
<br>
</p>
</font>
<font color="#000000" face="verdana,arial,helvetica" size="2">
<p>
The windows enumeration sample shows the methods described above, and additionally provides
a class which you can use to find a window based on its partial title or class name.
	<p><img src="..\..\images\enumwin.gif" alt="[Windows Enumeration Demo]" width="411" height="278"></p>

<br><br>
The font enumeration sample is very similar in structure, but the enumeration is made slightly
more tricky because for each font windows returns a long pointer to a ENUMLOGFONTEX structure.
You have to copy the memory this is pointing to into a VB structure before you can make use
of it.  Check the code to see how it works!  This code is also incorporated into the
<a href="..\odcbolst\article.htm">Owner Draw Combo and ListBox control</a> to provide a neat
font picker - well worth looking at (in my opinion).
</p>

	
	<br><br>
        <p><a href="#sectop"><img src="..\..\images\top.gif" border="0" width="8" height="12" hspace="4" alt="Top"></a>Back to <a href="#sectop">top</a><br>
	<a href="..\..\overview.htm"><img src="..\..\images\sc.gif" border="0" width="8" height="12" hspace="4" alt="Source Code - What We're About!"></a>Back to <a href="..\..\overview.htm">Source Code</a></p>


	</font>


	</td>
	<td>&nbsp</td>
</tr>
</table>

<!-- BODY:END -->

<!-- FOOTER:START -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td colspan="2">
        <IMG SRC="..\..\images\grpixel.gif" height="1" width="100%" border="0" ALT="">
        </td>
    </tr>
    <tr>
	<td width="16">&nbsp;</td>
        <td>
	<font size="1" face="Verdana, Arial, Helvetica">
	<p>
	<a href="..\..\mission.htm">About</a>&nbsp;&nbsp;<a 
	href="..\..\contrib.htm">Contribute</a>&nbsp;&nbsp;<a 
	href="mailto:steve@vbaccelerator.com">Send Feedback</a>&nbsp;&nbsp;<a 
	href="..\..\privacy.html">Privacy</a>
	<br><br>
        Copyright &copy; 1998-1999, Steve McMahon (
	<a href="mailto:steve@vbaccelerator.com">steve@vbaccelerator.com</a>). All Rights Reserved.<br>
	Last updated: 15 August 1999</font></p>
        </td>
    </tr>
</table>

<!-- FOOTER:END -->

</body>
</html>
