<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Author" content="Steve McMahon">
<meta name="KeyWords"
content="VB, VB6, Visual Basic, Visual Basic 5, Visual Basic 6, Dynamic HTML, DHTML, IE4, Internet Explorer, Internet Explorer 4, Active X, Active X Controls, Visual Basic Controls">
<meta name="GENERATOR" content="Notepad">
<title>Set the Show In Taskbar property at Run Time</title>
</head>

<body topmargin="0" leftmargin="0" link="#660000" vlink="#999966" LEFTMARGIN="0" TOPMARGIN="0" MARGINHEIGHT="0" MARGINWIDTH="0"  background="..\..\images\legacy.html">

<!-- AD:START -->
<table bgcolor="#336699" border="0" cellpadding="0" cellspacing="0" width="100%" >
<tr>
<td width="468">
<script type="text/javascript"><!--
google_ad_client = "pub-4690375644913255";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
//--></script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<noscript>
<a href="..\..\home\index.html"><img src="..\..\home\res\vbaccelad.png" width="468" height="60" 
border="0" alt="vbAccelerator - Faster VB and .NET Code" /></a>
</noscript>
</td>
<td>
<a href="..\..\home\index.html"><img src="..\..\home\res\vbaccelnew.png" width="125" height="60" 
border="0" alt="The new vbAccelerator Site - more VB and .NET Code and Controls" /></a>
</td>
</tr>
</table>
<!-- AD:END -->

<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#660000">
        <td width="100%" height="25">
        <font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
        <a name="sectop"></a>Source Code
        </strong>
        </font>
        </td>
        <td width="96">
        <font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
        <a title="Installation Instructions and Requirements" href="..\..\install.htm"><img src="..\..\images\install.gif" height="12" width="96" border="0" valign="center"></a>
        </strong>
        </font>
        </td>
        <td width="96">
        <font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
        <a title="Back to Source Code" href="..\..\overview.htm"><img src="..\..\images\srccode.gif" height="12" width="96" border="0" valign="center"></a>
        </strong>
        </font>
        </td>
</tr>
</table>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#6699CC">
        <td valign="top" width="32">
        <font color="#660000" face="verdana,arial,helvetica" size="6"><strong>3</strong></font>
        </td>
        <td>
        <font color="#660000" face="verdana,arial,helvetica" size="4"><strong>Code Libraries</strong></font>
        <font color="#660000" face="verdana,arial,helvetica" size="2">
        </font>
        </td>
        <td width="10">&nbsp</td>
</tr>
</table>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#EEEEEE">
	<td>&nbsp</td>
	<td>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	<p><b>Set the Show In Taskbar property at Run Time</b></p>
	</font>
	</td>
	<td>&nbsp;</td>
</tr>
<tr>
	<td>&nbsp;</td>
	<td>
	<font color="#660000" face="verdana,arial,helvetica" size="1">
	<p>A technique for control freaks - making things happen like <i>you</i> want them to</p>
	</font>	
	</td>
	<td>&nbsp;</td>
</tr>
</table>


<!-- SUPERCEEDED:START -->
<br />
<table border="0" width="100%" cellspacing="0" cellpadding="5">
<tr>
<td width="66" bgcolor="#FFFFFF"><br /></td>
<td width="100%" bgcolor="#EEEEEE">
	<p>
	<font color="#666666" face="verdana,arial,helvetica" size="5">
	<b>&nbsp;NOTE:</b></font>
	<font color="#999999" face="verdana,arial,helvetica" size="2">this code has been superceded by the <a href="..\..\home\vb\code\libraries\windows\forcing_a_window_to_show_in_the_taskbar\article.html" target="_top">version at the new site</a>.
	</font>
	<br />
        </p>
</td>
<td width="66" bgcolor="#FFFFFF"><br /></td>
</tr>
</table>
<br />
<!-- SUPERCEDED:END -->


<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#FFFFFF">
	<td>&nbsp</td>
	<td>
	<br>
	<img src="..\..\images\taskbar.gif" width="531" height="79" Alt="When it works..."><br><br>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
        <p><a href="taskbar.zip"><img src="..\..\images\vbdnload.gif" width="16" height="16" border="0" hspace="4"><img src="..\..\images\vbdnld6.gif" width="16" height="16" border="0" hspace="4">Download the Show In TaskBar project (30kb)</a></p>
	<b>Overview</b><br>
	VB provides a ShowInTask bar property for forms which allows you to choose whether a form is 
	shown in the Alt-Tab sequence and the shell's task bar.  However there are two limitations 
	to this:
	<ol>
	<li>The property can't be set at run-time.
	<li>Erm, it doesn't work anyway.
	</ol>
	Ok, it can work, but only when your form has certain styles.  If your form is modal, 
	there is nothing you can do to put it into the task bar.    I should not say bad things
	about the VB property, however, because this is my second attempt at this article.  
	The <a href="tasksold.htm">previous attempt</a> at solving this problem may have worked 
	once under test conditions but in general didn't do much else!
	<br><br>
	The technique demonstrated in this article sticks two fingers up at any attempt by VB to 
	prevent you from appearing in the task bar.  You get to set any flags you want well 
	<i>before</i> VB has had the chance to create your window and therefore tell Windows of your
	true intentions before VB's form engine stuffs it up for you.  Cool!
	<br><br>
	<b>ShowInTaskBar from a Windows Perspective</b><br>
	The problem with affecting built-in behaviours in Windows is that they are not well
	documented and sometimes troubling to use.  The logic to put a window into the task bar 
	can be dug out from MSDN although you have to search the Knowledge Base to find the
	answer:
	<ul>
	&quot;When you create a window, the taskbar examines the window’s extended style to see if either the WS_EX_APPWINDOW (&H40000) or WS_EX_TOOLWINDOW (defined as &H80) style is turned on. If WS_EX_APPWINDOW is turned on, the taskbar shows a button for the window, and if WS_EX_ TOOLWINDOW is turned on, the taskbar does not show a button for the window. A window should never have both of these extended styles.
	If the window doesn't have either of these styles, the taskbar decides to create a button if the window is unowned and does not create a button if the window is owned.&quot;<br>
	</ul>
	However, this doesn't acknowledge the fact that the only time the taskbar seems to check the
	styles is when the window is first created.  If you create a dialog without these styles,
	then no matter what you do to change the styles afterwards, nothing happens.
	<br><br>
	<b>You can Take Control</b><br>
	VB's interface into the window creation procedure is somewhat lacking.  You get
	a <i>Form_Initialise</i> event when the first instance of your form object is created,	
	followed by a <i>Form_Load</i> event when the form is about to be shown on screen.  
	<i>Form_Initialise</i> is of no use here because it is in effect an event fired when
	the object is constructed,
	so although the	object has just come into life, and hence you can use local variables,
	the associated UI elements have not yet been created.  Therefore you may not refer to
	any windows or controls at this stage.  <i>Form_Load</i> is no use either because this
	fires at the moment the window has been created and is about to be shown.  It would
	have been nice to get some more intermediate events, but I suppose this is the price
	to pay for having an easy to use interface.
	<br><br>
	So, given that there is no VB hook into the point when the window is created, how else
	might you detect this event?
	<br><br>
	<b>The Windows Hook to the rescue</b><br>
	When all other things have failed, a <a href="..\hook\vbalhook.htm">Windows Hook</a> is 
	often a good thing to consider.  Windows Hooks allow you to get into the message stream
	for your app before the messages get sent to it - and allows you to change or otherwise
	subvert the standard processing.
	<br><br>
	By installing a hook of type <i>WH_CALLWNDPROC</i> during an <i>_Initialise</i> event,
	your app can be notified of any attempts by Windows to call a Window Procedure.  This
	allows us to capture the crucial <i>WM_CREATE</i> notification which is sent when the
	window is first created.
	<br><br>
	<b>In Code - The Theory</b><br>
	The first thing to do is to install a windows hook before any windows get created and
	start watching for <i>WM_CREATE</i> calls.  The <i>_Initialise</i> event of Forms,
	UserControls and so on always fires before any windows have been created, whilst all
	other events fire after the windows have been created, so this is a good place as
	any to install the hook for window creation checking (note that the <i>_Initialise</i> event only fires once for
	a form object, so if you want this to work correctly you will always need a new instance
	of a form).  Here is how to initiate the hook:
	<br><br>
	</font>
<font color="#000000" face="Lucida Console,Courier New" size="1">
Public Sub HookAttach()<br>
&nbsp;&nbsp;&nbsp;m_hHook = SetWindowsHookEx(WH_CALLWNDPROC, AddressOf AppHook, App.hInstance, App.ThreadID)<br>
&nbsp;&nbsp;&nbsp;Debug.Assert m_hHook &lt;&gt; 0<br>
End Sub<br>
<br>
</font>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	Now whenever any window in your application has its Window Procedure called, the hook 
	will fire your <i>AppHook</i> procedure.  You can then check whether the call is a 
	<i>WM_CREATE</i> message and also you can isolate the particular window being created:
	<br><br>
<font color="#000000" face="Lucida Console,Courier New" size="1">
Private Function AppHook(ByVal idHook As Long, ByVal wParam As Long, ByVal lParam As Long) As Long<br>
&nbsp;&nbsp;&nbsp;Dim CWP As CWPSTRUCT<br>
&nbsp;&nbsp;&nbsp;Dim k As Long, aClass As String<br>
<br>
&nbsp;&nbsp;&nbsp;If idHook &gt;= 0 Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CopyMemory CWP, ByVal lParam, Len(CWP)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Select Case CWP.message<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case WM_CREATE<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aClass = Space$(128)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = GetClassName(CWP.hwnd, ByVal aClass, 128)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aClass = Left$(aClass, k)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If IsIn(aClass, C_MDIFORMCLASS_IDE, C_MDIFORMCLASS_EXE, C_MDIFORMCLASS5_IDE, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C_MDIFORMCLASS5_EXE, C_FORMCLASS_IDE_DC, C_FORMCLASS_EXE_DC, C_FORMCLASS_IDE, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C_FORMCLASS_EXE, C_FORMCLASS5_IDE, C_FORMCLASS5_EXE) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_lHookWndProc = SetWindowLong(CWP.hwnd, GWL_WNDPROC, AddressOf Form_WndProc)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End Select<br>
&nbsp;&nbsp;&nbsp;End If<br>
&nbsp;&nbsp;&nbsp;AppHook = CallNextHookEx(m_hHook, idHook, wParam, ByVal lParam)<br>
End Function<br>
<br>
</font>
<font color="#000000" face="verdana,arial,helvetica" size="2">	
	The constants listed above specify all the various class names that VB gives to a form for
	VB5 and VB6 - and there's a lot of them!  (Thanks to Geoff Glaze for his assistance with this):
	<br><br>
<font color="#000000" face="Lucida Console,Courier New" size="1">
Private Const C_MDIFORMCLASS_IDE = &quot;ThunderMDIForm&quot;<br>
Private Const C_MDIFORMCLASS_EXE = &quot;ThunderRT6MDIForm&quot;<br>
Private Const C_MDIFORMCLASS5_IDE = &quot;ThunderMDIForm&quot;<br>
Private Const C_MDIFORMCLASS5_EXE = &quot;ThunderRT5MDIForm&quot;<br>
<br>
Private Const C_FORMCLASS_IDE_DC = &quot;ThunderFormDC&quot;<br>
Private Const C_FORMCLASS_EXE_DC = &quot;ThunderRT6FormDC&quot;<br>
Private Const C_FORMCLASS_IDE = &quot;ThunderForm&quot;<br>
Private Const C_FORMCLASS_EXE = &quot;ThunderRT6Form&quot;<br>
Private Const C_FORMCLASS5_IDE = &quot;ThunderForm&quot;<br>
Private Const C_FORMCLASS5_EXE = &quot;ThunderRT5Form&quot;<br>
	<br><br>
<font color="#000000" face="verdana,arial,helvetica" size="2">	
	You will see that in the above function, I set a new Window Procedure to subclass the 
	window in response to the <i>WM_CREATE</i> message. Why?
	<br><br>
	Well, there is a problem with calling code in response to <i>WH_CALLWNDPROC</i> events.
	 If you do anything during
	a <i>WH_CALLWNDPROC</i> hook notification which would call the window procedure of that
	window again, then VB crashes.  This rules out a lot - for example, you can't change the
	style of the window, and so forth.  To get around this problem, you can use the 
	hook notification to install a temporary subclass on the window to capture exactly the
	same message again - and then you can make as many modifications as you wish.
	<br><br>	
	So finally I respond to the <i>WM_CREATE</i> message in a subclass procedure.  As you
	will see, I just change the Extended Style of the form using <i>SetWindowLong</i> and
	by modifying the Window's creation data, plus I know I no longer need the subclass
	so I can reinstall the original version:
	<br><br>
<font color="#000000" face="Lucida Console,Courier New" size="1">
Private Function Form_WndProc(ByVal hwnd As Long, ByVal Msg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long<br>
&nbsp;&nbsp;&nbsp;Dim lSetStyleEX As Long<br>
&nbsp;&nbsp;&nbsp;<font color="#999999" face="Lucida Console,Courier New" size="1">' SPM - specific wnd proc for a form.  Only called once for the WM_CREATE message.</font><font color="#000000" face="Lucida Console,Courier New" size="1"><br>
&nbsp;&nbsp;&nbsp;Select Case Msg<br>
&nbsp;&nbsp;&nbsp;Case WM_CREATE<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim tCS As CREATESTRUCT<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CopyMemory tCS, ByVal lParam, Len(tCS)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lSetStyleEX = GetWindowLong(hwnd, GWL_EXSTYLE)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lSetStyleEX = lSetStyleEX Or WS_EX_APPWINDOW<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lSetStyleEX = lSetStyleEX And (Not WS_EX_TOOLWINDOW)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tCS.ExStyle = lSetStyleEX<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CopyMemory ByVal lParam, tCS, Len(tCS)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetWindowLong hwnd, GWL_WNDPROC, m_lHookWndProc<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetWindowLong hwnd, GWL_EXSTYLE, tCS.ExStyle<br>
&nbsp;&nbsp;&nbsp;End Select<br>
&nbsp;&nbsp;&nbsp;Form_WndProc = CallWindowProc(m_lHookWndProc, hwnd, Msg, wParam, lParam)<br>
End Function<br>
</font>
<font color="#000000" face="verdana,arial,helvetica" size="2">
	<br><br>
	<b>In Code - In Practice</b><br>
	In the download sample the code is all wrapped up into a single module, <i>modStyles</i>.
	All you have to do to make this work is call <i>HookAttach</i> from the <i>Form_Initialise</i>
	event and then call <i>HookDetach</i> sometime later (I use the <i>Form_Load</i> event
	because I know this fires after the window has been created).
	<br><br>
	There are a whole load of other possible uses of this code.  Matt Hart has demonstrated how
	you can use this technique to modify the style of a VB control as it is created, for example,
	to create an Owner Draw Combo Box and an Owner Draw Tab.  Have fun!
	</p>
	
	<br><br><br>

	<p>Back to <a href="#sectop">top</a></p>
	<p>Back to <a href="..\..\overview.htm" target="vbamain">Source Code Overview</a>


	</font>


	</td>
	<td>&nbsp</td>
</tr>
</table>

<!-- BODY:END -->

<!-- FOOTER:START -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td colspan="2">
        <IMG SRC="..\..\images\grpixel.gif" height="1" width="100%" border="0" ALT="">
        </td>
    </tr>
    <tr>
	<td width="16">&nbsp;</td>
        <td>
	<font size="1" face="Verdana, Arial, Helvetica">
	<p>
	<a href="..\..\mission.htm">About</a>&nbsp;&nbsp;<a 
	href="..\..\contrib.htm">Contribute</a>&nbsp;&nbsp;<a 
	href="mailto:steve@vbaccelerator.com">Send Feedback</a>&nbsp;&nbsp;<a 
	href="..\..\privacy.html">Privacy</a>
	<br><br>
        Copyright &copy; 1998-2000, Steve McMahon (
	<a href="mailto:steve@vbaccelerator.com">steve@vbaccelerator.com</a>). All Rights Reserved.<br>
	Last updated: 21 March 2000
	</font></p>
        </td>
    </tr>
</table>

<!-- FOOTER:END -->

</body>
</html>
