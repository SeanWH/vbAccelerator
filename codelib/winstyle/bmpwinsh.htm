<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Author" content="Steve McMahon">
<meta name="KeyWords"
content="VB, VB6, Visual Basic, Visual Basic 5, Visual Basic 6, Dynamic HTML, DHTML, IE4, Internet Explorer, Internet Explorer 4, Active X, Active X Controls, Visual Basic Controls">
<meta name="GENERATOR" content="Notepad">
<title>Creating Window Shapes from Bitmaps</title>
</head>

<body topmargin="0" leftmargin="0" link="#660000" vlink="#999966" LEFTMARGIN="0" TOPMARGIN="0" MARGINHEIGHT="0" MARGINWIDTH="0"  background="..\..\images\legacy.html">

<!-- AD:START -->
<table bgcolor="#336699" border="0" cellpadding="0" cellspacing="0" width="100%" >
<tr>
<td width="468">
<script type="text/javascript"><!--
google_ad_client = "pub-4690375644913255";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
//--></script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<noscript>
<a href="..\..\home\index.html"><img src="..\..\home\res\vbaccelad.png" width="468" height="60" 
border="0" alt="vbAccelerator - Faster VB and .NET Code" /></a>
</noscript>
</td>
<td>
<a href="..\..\home\index.html"><img src="..\..\home\res\vbaccelnew.png" width="125" height="60" 
border="0" alt="The new vbAccelerator Site - more VB and .NET Code and Controls" /></a>
</td>
</tr>
</table>
<!-- AD:END -->


<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#660000">
        <td width="100%" height="25">
        <font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
        <a name="sectop"></a>Source Code
        </strong>
        </font>
        </td>
        <td width="96">
        <font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
        <a title="Installation Instructions and Requirements" href="..\..\install.htm"><img src="..\..\images\install.gif" height="12" width="96" border="0" valign="center"></a>
        </strong>
        </font>
        </td>
        <td width="96">
        <font color="#FFFFFF" face="verdana,arial,helvetica" size="2"><strong>
        <a title="Back to Source Code" href="..\..\overview.htm"><img src="..\..\images\srccode.gif" height="12" width="96" border="0" valign="center"></a>
        </strong>
        </font>
        </td>
</tr>
</table>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#6699CC">
        <td valign="top" width="32">
        <font color="#660000" face="verdana,arial,helvetica" size="6"><strong>3</strong></font>
        </td>
        <td>
        <font color="#660000" face="verdana,arial,helvetica" size="4"><strong>Code Libraries</strong></font>
        <font color="#660000" face="verdana,arial,helvetica" size="2">
        </font>
        </td>
        <td width="10">&nbsp</td>
</tr>
</table>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr bgcolor="#EEEEEE">
	<td>&nbsp</td>
	<td>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	<p><b>Creating Window Shapes from Bitmaps</b></p>
	</font>
	</td>
	<td>&nbsp;</td>
</tr>
<tr>
	<td>&nbsp;</td>
	<td>
	<font color="#6699CC" face="verdana,arial,helvetica" size="1">
	<p>Now complete control over window shape is yours - for Win9x, NT and 2000</p>
	</font>	
	</td>
	<td>&nbsp;</td>
</tr>
</table>

<!-- SUPERCEEDED:START -->
<br />
<table border="0" width="100%" cellspacing="0" cellpadding="5">
<tr>
<td width="66" bgcolor="#FFFFFF"><br /></td>
<td width="100%" bgcolor="#EEEEEE">
	<p>
	<font color="#666666" face="verdana,arial,helvetica" size="5">
	<b>&nbsp;NOTE:</b></font>
	<font color="#999999" face="verdana,arial,helvetica" size="2">this code has been superceded by the <a href="..\..\home\vb\code\libraries\graphics_and_gdi\changing_window_shapes\creating_window_shapes_from_bitmaps\article.html" target="_top">version at the new site</a>.
	</font>
	<br />
        </p>
</td>
<td width="66" bgcolor="#FFFFFF"><br /></td>
</tr>
</table>
<br />
<!-- SUPERCEDED:END -->


<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<tr bgcolor="#FFFFFF">
	<td>&nbsp;</td>
	<td>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	<p><img src="..\..\images\regfries.gif" alt="Inkblot Test - what do you see?" width="247" height="138"></p>
	<p><a href="bmpshape.zip"><img src="..\..\images\vbdnload.gif" width="16" height="16" border="0" hspace="4">Download the Bitmap Region project files (48kb)</a></p>
	<p>
	<b>Introduction</b><br>
	The <a href="winshape.htm">Windows Shape</a> article shows how to use the <i>SetWindowRgn</i> function
	to apply a geometric region to a window using the GDI region creation functions.  However, beyond using a
	simple geometric region, things get difficult.  How do you specify the shape you want?  
	<br><br>
	What you really	want to do is to load a bitmap containing the shape and use that to create the region.  VB allows you to
	do this with UserControls (using the <i>MaskPicture</i> and setting the misleading Transparent setting for
	the <i>BackStyle</i> property), but at a cost.  The cost is performance - VB controls using these settings
	can quickly become unusable.  So much so there are even warnings in the VB5 Books OnLine against using the
	setting if you use "... a complex bitmap [sic]".
	<br><br>
	The code to implement regions based on bitmaps isn't all that tricky, but it can lead to performance problems.
	If you aren't a slave to VB's implementation, however, you can take the performance of complex region code
	to new levels by precompiling your region data in files or resources.  Sounds good?  Then read on.
	<br><br>
	<b>Bitmap to Region</b><br>
	The first part of this problem is how to create a region from a bitmap.  To do this, you need to be able
	to do two things:
	<ol>
	<li>Read the colours of the pixels of the bitmap to determine which ones should be transparent.
	<li>Remove transparent pixels from the region.
	</ol>
	To get at bitmap bits, I use a <a href="..\gfx\dibsect.htm">DIBSection</a>. DIBSections are a GDI 
	object with two very useful properties:
	<ol>
	<li>The bitmap data is stored as a Display Independent Bitmap (i.e. Windows will not attempt
	to map colours for you, or dither any pixels)
	<li>The bitmap data is stored in Windows memory (rather than Graphics card memory), and is 
	therefore directly accessible to Windows programs for modification.
	</ol>
	Once the bitmap is converted to a DIBSection, it is a simple matter to loop through the data and read
	the data.  More information on reading data within a DIBSection is given in the <a href="..\..\overmed.htm">Image Processing samples</a>
	at this site.
	<br><br>
	The next part is to convert the bitmap data to a Win32 region.  This is achieved using just two Win32 region
	functions: <i>CreateRectRgn</i> and <i>CombineRgn</i>. The CombineRgn function is the powerful function
	in this instance.  CombineRgn allows boolean operations to be used on a pair of regions so they can be
	combined in many ways: where they both intersect (<i>RGN_AND</i>), where either exists (<i>RGN_OR</i>), 
	where either but not both exists (<i>RGN_XOR</i>) and so forth.
	<br><br>
	The simplified algorithm to set up the region from the bitmap is therefore:
	</p>
	</font>
	<p>
	<menu>
	<font face="Lucida Console,courier new" size="2" color="#000000">
	For x = 0 to Width<br>
	&nbsp;&nbsp;For y = 0 to Height<br>
	&nbsp;&nbsp;&nbsp;&nbsp;If Pixel(x,y) = Transparent Then<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If Not bInTransparent Then<br>	
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bInTransparent = True<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yStartTransparent = y<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If<br>
	&nbsp;&nbsp;&nbsp;&nbsp;Else<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If bInTransparent Then<br>
	<font color="#999999">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' Remove the transparent section from the region<br>
	<font color="#000000">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hRgnTemp = CreateRectRgn(x,yStartTransparent,x+1,y)<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CombineRgn hRgnOut, hRgnTemp, RGN_XOR<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeleteRgn hRgnTemp<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bInTransparent = False<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If<br>
	&nbsp;&nbsp;&nbsp;&nbsp;End If<br>
	&nbsp;&nbsp;Next y<br>
	<font color="#999999">
	&nbsp;&nbsp;;' If last transparent section extends to the width of the bitmap, then remove it:<br>
	<font color="#000000">
	&nbsp;&nbsp;If bInTransparent Then<br>
	&nbsp;&nbsp;&nbsp;hRgnTemp = CreateRectRgn(x,yStartTransparent,x+1,y)<br>
	&nbsp;&nbsp;&nbsp;&nbsp;CombineRgn hRgnOut, hRgnTemp, RGN_XOR<br>
	&nbsp;&nbsp;&nbsp;&nbsp;DeleteRgn hRgnTemp<br>
	&nbsp;&nbsp;&nbsp;&nbsp;bInTransparent = False<br>
	&nbsp;&nbsp;End If<br>
	Next x<br>
	</menu>
	</font>
	</p>
	<p>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	This algorithm attempts to improve performance compared to the simple pixel by pixel 
	algorithm by combining consecutive pixels in the y direction into a single rectangle.
	Potentially there are more optimisations to be made (<a href="mailto:steve@vbaccelerator.com">Can you
	think of one?</a>)  Note that the real algorithm must also take into account that a DIBSection is
	flipped vertically.
	<br><br>
	<b>From Region to High Performance</b><br>
	That shows how to create a region, however, if you experiment with the code you will soon see that
	the time it takes to create your region at run-time is significant if the source bitmap is large enough.  
	If you	need to work with an arbitrary bitmap at run-time then you must live with this performance hit 
	(perhaps you could run some sort of attract sequence whilst the region create is running, similar to 
	the way many <a href="javascript:window.alert(&quot;http://www.shockwave.com/\nThis link was not retrieved.&quot;)">Shockwave animations</a> attempt to hide their pathetic 
	load times - soon you will know why you need DSL or a Cable Modem!).  
	However, if you know the bitmap in advance, you can create the region for it almost 
	instantaneously by loading precompiled region data in the form that GDI's region code wants it.
	<br><br>
	GDI provides a function <i>GetRegionData</i> to return a region's set-up information in native format, and
	also an inverse function <i>ExtCreateRegion</i>.  With a little modification to the VB API viewer's 
	declares for these functions, we can convert them into usable functions:
	<br><br>
	</font>
	<font color="#000000" face="Lucida Console,courier new" size="1">
	<menu>
	Private Declare Function GetRegionData Lib "gdi32" ( _<br>
	&nbsp;&nbsp;ByVal hRgn As Long, ByVal dwCount As Long, lpRgnData As Any) As Long<br>
	Private Declare Function ExtCreateRegion Lib "gdi32" ( _<br>
	&nbsp;&nbsp;lpXform As Any, ByVal nCount As Long, lpRgnData As Any) As Long<br>
	</menu>
	<br><br>
	</font>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	Calling <i>GetRegionData</i> with the dwCount parameter set to zero and the lpRgnData parameter set to 
	ByVal 0& returns the number of bytes of data required to hold the region data.  Then you can 
	dimension a byte array to hold this number of bytes.  To get the data into the array of bytes, you
	then set dwCount to the number of bytes and pass a reference to the first byte of the array to the lpRgnData
	parameter.
	<br><br>
	To create a region, you just set the nCount parameter to the size of the array and pass the byte array
	back info lpRgnData.  The lpXform parameter is an optional parameter which only works under Windows NT/2000.
	This allows you to rotate the region as it is created using a rotation matrix.  To ignore this parameter,
	pass in ByVal 0&.
	<br><br>
	Since the region data is now stored in a byte array, you can easily save and load it to a file or load
	it from a resource.  See the article <a href="..\resource\extres.htm">Reading data
	from local or external library resources.</a> For the details of how to do this.
	<br><br>
	<b>Put it Into Use</b><br>
	To use the code here, you need to incorporate two class libraries into your project:
	<ol>
	<li><u>cDIBSection</u> - to allow creation of a DIBSection object to make the region from.
	<li><u>cDIBSectionRegion</u> - the region creation and managment class.
	</ol>
	<u>cDIBSection</u><br>
	The use of cDIBSection is described <a href="..\gfx\dibsect.htm">elsewhere</a> on this site, however
	the only methods you will be interested in are the ones to create a bitmap to make your region from.
	These are:
	</font>
	</p>
	<p>
	<table border="0" cellspacing="0" cellpadding="0">
	<tr><td width="12">&nbsp;</td>
	<td bgcolor="#EEEEEE"><font color="#000000" face="verdana,arial,helvetica" size="2">
	<b>Method</b>
	</font></td>
	<td width="1" bgcolor="#EEEEEE">&nbsp;</td>
	<td bgcolor="#EEEEEE"><font color="#000000" face="verdana,arial,helvetica" size="2">
	<b>Description</b>
	</font></td>
	<td width="12">&nbsp;</td>
	</tr>
	<tr><td width="12">&nbsp;</td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	CreateFromPicture
	</font></td>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	takes a StdPicture object and creates a DIBSection containing the same bitmap bits
	</font></td>
	</tr>
	<tr><td width="12">&nbsp;</td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Create
	</font></td>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Creates a DIBSection at the specified size.  You can then use <i>LoadPictureBlt</i> to 
	copy a bitmap from another hDC into the DIBSection.
	</font></td>
	</tr>
	</table>
	</p>	
	<p><table width = "100%" border="0" cellspacing="0" cellpadding="0">
	<tr>
	<td valign="top"><img src="..\..\images\minitip.gif" width="10" height="14" hspace="10"></td>
	<td bgcolor="#99CCFF"><font color="#000099" face="verdana,arial,helvetica" size="2">
	<b>Tip</b> Don't use a JPG file to create a window region<br>
	</font>
	</td>
	<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
	</tr>
	<tr>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Whilst JPG files often have the smallest size, they are a generally a poor choice for applications
	which need to create a mask (transparent) area.  This is because JPG does not preserve colour stability
	in an image.  If you look close at a "black" area in a JPG file, you will actually see that the pixels
	are all different, within around +/- 3 colour values of the actual value.  This effect becomes more
	pronounced (in scale as well as value) as the quality of the JPG file is reduced.
	<br>
	</font>
	</td>
	<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
	</tr>
	</table>
	</p>
	
	<p>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	<u>cDIBSectionRegion</u><br>
	Once you have a cDIBSection object containing the picture you want to create a bitmap from, you
	can then use this to create a region.  The cDIBSectionRegion also contains methods to save region
	data to disk and to load region data from a file or a resource.
	</font>
	</p>

	<p>
	<table border="0" cellspacing="0" cellpadding="0">
	<tr><td width="12">&nbsp;</td>
	<td bgcolor="#EEEEEE"><font color="#000000" face="verdana,arial,helvetica" size="2">
	<b>Method</b>
	</font></td>
	<td width="1" bgcolor="#EEEEEE">&nbsp;</td>
	<td bgcolor="#EEEEEE"><font color="#000000" face="verdana,arial,helvetica" size="2">
	<b>Description</b>
	</font></td>
	<td width="12">&nbsp;</td>
	</tr>
	<tr><td width="12">&nbsp;</td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Create
	</font></td>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Builds a region from a cDIBSection picture.
	</font></td>
	</tr>
	<tr><td width="12">&nbsp;</td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Applied
	</font></td>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Gets/sets whether the current region is applied to the specified window handle.
	</font></td>
	</tr>
	<tr><td width="12">&nbsp;</td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	AppliedToCount
	</font></td>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Returns the number of windows the current region is applied to.
	</font></td>
	</tr>
	<tr><td width="12">&nbsp;</td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	hWndForIndex
	</font></td>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Returns the window handle the region is applied to at the specified index .
	</font></td>
	</tr>
	<tr><td width="12">&nbsp;</td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Destroy
	</font></td>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Destroys the region, removing it from any window handle it is applied to.
	</font></td>
	</tr>
	<tr><td width="12">&nbsp;</td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	LoadFromFile
	</font></td>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Loads a region from a file previously created using the Save method.
	</font></td>
	</tr>
	<tr><td width="12">&nbsp;</td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	LoadFromResource
	</font></td>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Loads a region from a user-defined resource creating from the output of the Save method.
	See the article <a href="..\resource\extres.htm">Reading data
	from local or external library resources</a> for details on how to create the resource.
	</font></td>
	</tr>
	<tr><td width="12">&nbsp;</td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Save
	</font></td>
	<td></td>
	<td><font color="#000000" face="verdana,arial,helvetica" size="2">
	Saves the current region to a file for subsequent use with the LoadFromFile and LoadFromResource
	functions.
	</font></td>
	</tr>
	</table>

	</p>
	<p>
	<font color="#000000" face="verdana,arial,helvetica" size="2">
	<b>The End of the Beginning</b><br>
	That's the end of arbitrary shaped windows under Win9x and NT.  However, Windows 2000 includes a new 
	way for creating windows of any shape, including windows with semi-transparent (alpha-blended)
	regions and so on.  This is called Layered Windows, and will be covered in a forthcoming vbAccelerator
	article. Here is what is says in MSDN about Layered Windows:
	<br><br>	
	&quot;Using a layered window can significantly improve performance and visual effects for a window 
	that has a complex shape, animates its shape, or wishes to use alpha blending effects. 
	The system automatically composes and repaints layered windows and the windows of underlying applications. 
	As a result, layered windows are rendered smoothly, without the flickering typical of complex 
	window regions. In addition, layered windows can be partially translucent, that is, alpha-blended.&quot;
	&nbsp;Sounds cool?  Just wait!
	<br><br>
	<p><a href="#sectop"><img src="..\..\images\top.gif" border="0" width="8" height="12" hspace="4" alt="Top"></a>Back to <a href="#sectop">top</a></p>
	<p><a href="..\..\overview.htm"><img src="..\..\images\sc.gif" border="0" width="8" height="12" hspace="4" alt="Source Code - What We're About!"></a>Back to <a href="..\..\overview.htm">Source Code</a></p>
	</font>


	</td>
	<td>&nbsp</td>
</tr>
</table>
<!-- BODY:END -->

<!-- FOOTER:START -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td colspan="2">
        <IMG SRC="..\..\images\grpixel.gif" height="1" width="100%" border="0" ALT="">
        </td>
    </tr>
    <tr>
	<td width="16">&nbsp;</td>
        <td>
	<font size="1" face="Verdana, Arial, Helvetica">
	<p>
	<a href="..\..\mission.htm">About</a>&nbsp;&nbsp;<a 
	href="..\..\contrib.htm">Contribute</a>&nbsp;&nbsp;<a 
	href="mailto:steve@vbaccelerator.com">Send Feedback</a>&nbsp;&nbsp;<a 
	href="..\..\privacy.html">Privacy</a>
	<br><br>
        Copyright &copy; 1998-1999, Steve McMahon (
	<a href="mailto:steve@vbaccelerator.com">steve@vbaccelerator.com</a>). All Rights Reserved.<br>
	Last updated: 13 August 1999</font></p>
        </td>
    </tr>
</table>
<!-- FOOTER:END -->

</body>
</html>
